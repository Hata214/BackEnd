# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. When you receive a new task, first review the Scratchpad content, clear old tasks if necessary, explain the new task, and plan your steps. Use todo markers like:
[X] Task 1
[ ] Task 2

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification
For visual testing and verification, use:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

## LLM
For code assistance and reviews:
```bash
venv/bin/python ./tools/llm_api.py --prompt "Your question" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)

# Lessons

## User Specified Lessons
- **Project Name: VanLangBudget Backend:** This is the name of the backend project. Remember to use this name consistently.
- **Tech Stack: Node.js, Express.js, MongoDB, Swagger**: Using Node.js with Express for the backend framework, MongoDB for database, and Swagger for API documentation and testing.
- **Features: Budget management, transaction tracking, user authentication, API documentation with Swagger**: The application will manage budgets, track transactions, handle user authentication, and provide API documentation with Swagger.
- **Framework: Express.js**: Express.js is the chosen framework for building the RESTful API.
- **Database: MongoDB**: MongoDB will be used as the database system for storing budget and transaction data.
- **Deployment: Vercel**: The application is configured for deployment on Vercel with appropriate environment variables.
- **IDE Choice: Cursor IDE:** Remember that the IDE is Cursor. Leverage its features.
- **Real-time Features**: WebSocket implementation for real-time notifications and updates using Socket.io.
- **Email Configuration**: Email setup can be postponed to later phases of the project.
- **Validation**: Using Joi for schema validation with detailed error messages.
- **Security**: Implementing rate limiting, JWT authentication, and global error handling.
- **MongoDB Connection**: Using enhanced connection options for better stability on Vercel.

## Cursor learned
- **Cursor IDE Awareness:** Leverage Cursor IDE's specific features for code completion, refactoring, and debugging.
- **Version Control Integration:** Effectively use Cursor IDE's Git integration for version control management.
- **Collaboration Tools:** Explore Cursor IDE's collaboration tools for sharing code and working with others.
- **Customizable Settings:** Adjust Cursor IDE's settings for optimal performance and coding preferences.

# Scratchpad

**Current Task: VanLangBudget Backend Development Progress**

Progress:
[X] Define tech stack: Node.js, Express.js, MongoDB, Swagger
[X] Initialize project structure
[X] Set up Express.js server
[X] Configure Swagger for API documentation
[X] Create basic API endpoints
[X] Set up MongoDB connection
[X] Implement basic models
[X] Set up basic authentication middleware
[X] Configure environment variables
[X] Set up deployment configuration (vercel.json)
[X] Implement Categories Management
[X] Add Real-time Features (WebSocket)
[X] Configure basic notifications (WebSocket)
[X] Implement rate limiting for API endpoints
[X] Set up global error handling middleware
[X] Implement validation with Joi schemas
[X] Configure MongoDB connection with enhanced options

Current Implementation Status:
- Project structure follows MVC pattern
- Dependencies installed and configured:
  - Express.js v4.18.2 for server
  - MongoDB/Mongoose v7.5.0 for database
  - Swagger UI Express v5.0.1 for API documentation
  - JWT v9.0.1 for authentication
  - Bcrypt v2.4.3 for password hashing
  - Socket.io v4.8.1 for real-time features
  - Express Rate Limit v7.5.0 implemented
  - Joi v17.13.3 for schema validation
  - Compression v1.8.0 for response optimization
  - Helmet v8.0.0 for security headers
- Real-time features implemented:
  - WebSocket server setup
  - Transaction notifications
  - Budget limit alerts
  - Balance updates
  - Online users tracking
- Security features implemented:
  - Rate limiting (100 requests per 15 minutes)
  - JWT authentication
  - Password hashing
  - Global error handling middleware
  - Validation middleware

Next Steps (Priority Order):
[X] System Enhancement:
    - Rate limiting for all APIs
    - Input validation
    - Error handling
[ ] System Enhancement (Remaining):
    - Security headers configuration
    - CORS policy refinement
[ ] Performance Optimization:
    - API optimization
    - Database indexing
    - Caching implementation
    - Resource management
[ ] Documentation & Testing:
    - Complete API documentation
    - Unit tests
    - Integration tests
    - Performance tests
[ ] Email Integration (Final Phase):
    - SMTP configuration
    - Email templates
    - Notification preferences
[ ] Deployment & CI/CD:
    - Docker configuration
    - CI/CD pipeline
    - Production deployment

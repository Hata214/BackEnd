# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. When you receive a new task, first review the Scratchpad content, clear old tasks if necessary, explain the new task, and plan your steps. Use todo markers like:
[X] Task 1
[ ] Task 2

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification
For visual testing and verification, use:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

## LLM
For code assistance and reviews:
```bash
venv/bin/python ./tools/llm_api.py --prompt "Your question" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)

# Lessons

## User Specified Lessons
- **Project Name: VanLangBudget Backend:** This is the name of the backend project. Remember to use this name consistently.
- **Tech Stack: Node.js, Express.js, MongoDB, Swagger**: Using Node.js with Express for the backend framework, MongoDB for database, and Swagger for API documentation and testing.
- **Features: Budget management, transaction tracking, user authentication, API documentation with Swagger**: The application will manage budgets, track transactions, handle user authentication, and provide API documentation with Swagger.
- **Framework: Express.js**: Express.js is the chosen framework for building the RESTful API.
- **Database: MongoDB**: MongoDB will be used as the database system for storing budget and transaction data.
- **Deployment: Docker, Heroku/AWS**: The application will be containerized with Docker and deployed to either Heroku or AWS.
- **IDE Choice: Cursor IDE:** Remember that the IDE is Cursor. Leverage its features.

## Cursor learned
- **Cursor IDE Awareness:** Leverage Cursor IDE's specific features for code completion, refactoring, and debugging.
- **Version Control Integration:** Effectively use Cursor IDE's Git integration for version control management.
- **Collaboration Tools:** Explore Cursor IDE's collaboration tools for sharing code and working with others.
- **Customizable Settings:** Adjust Cursor IDE's settings for optimal performance and coding preferences.

# Scratchpad

**Current Task: VanLangBudget Backend Development Progress**

Progress:
[X] Define tech stack: Node.js, Express.js, MongoDB, Swagger
[X] Initialize project structure
[X] Set up Express.js server
[X] Configure Swagger for API documentation
[X] Create basic API endpoints
[X] Set up MongoDB connection
[X] Implement basic models
[X] Set up basic authentication middleware
[X] Configure environment variables
[X] Set up deployment configuration (vercel.json)

Current Implementation Status:
- Project structure follows MVC pattern
- Dependencies installed:
  - Express.js for server
  - MongoDB/Mongoose for database
  - Swagger for API documentation
  - JWT for authentication
  - Bcrypt for password hashing
  - Nodemailer for email functionality
  - Joi for validation
  - Rate limiting implemented

Next Steps:
[ ] Implement additional API endpoints
[ ] Add comprehensive API documentation
[ ] Implement advanced features
[ ] Set up automated testing
[ ] Configure CI/CD pipeline
[ ] Optimize performance and security
[ ] Complete Docker configuration

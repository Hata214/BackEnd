# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. When you receive a new task, first review the Scratchpad content, clear old tasks if necessary, explain the new task, and plan your steps. Use todo markers like:
[X] Task 1
[ ] Task 2

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification
For visual testing and verification, use:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

## LLM
For code assistance and reviews:
```bash
venv/bin/python ./tools/llm_api.py --prompt "Your question" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)

# Lessons

## User Specified Lessons
- **Project Name: VanLangBudget Backend:** This is the name of the backend project. Remember to use this name consistently.
- **Tech Stack: Node.js, Express.js, MongoDB, Swagger**: Using Node.js with Express for the backend framework, MongoDB for database, and Swagger for API documentation and testing.
- **Features: Budget management, transaction tracking, user authentication, API documentation with Swagger**: The application will manage budgets, track transactions, handle user authentication, and provide API documentation with Swagger.
- **Framework: Express.js**: Express.js is the chosen framework for building the RESTful API.
- **Database: MongoDB**: MongoDB will be used as the database system for storing budget and transaction data.
- **Deployment: Vercel**: The application is configured for deployment on Vercel with appropriate environment variables.
- **IDE Choice: Cursor IDE:** Remember that the IDE is Cursor. Leverage its features.
- **Real-time Features**: WebSocket implementation for real-time notifications and updates using Socket.io.
- **Email Configuration**: Email setup can be postponed to later phases of the project.
- **Validation**: Using Joi for schema validation with detailed error messages.
- **Security**: Implementing rate limiting, JWT authentication, and global error handling.
- **MongoDB Connection**: Using enhanced connection options for better stability on Vercel.

## Cursor learned
- **Cursor IDE Awareness:** Leverage Cursor IDE's specific features for code completion, refactoring, and debugging.
- **Version Control Integration:** Effectively use Cursor IDE's Git integration for version control management.
- **Collaboration Tools:** Explore Cursor IDE's collaboration tools for sharing code and working with others.
- **Customizable Settings:** Adjust Cursor IDE's settings for optimal performance and coding preferences.

# Scratchpad

**Current Task: Khắc phục lỗi triển khai trên Vercel**

Progress:
[X] Cập nhật cấu hình vercel.json với memory và maxDuration
[X] Cải thiện xử lý lỗi trong kết nối MongoDB
[X] Tối ưu hóa cấu hình WebSocket cho môi trường serverless
[X] Thêm xử lý lỗi toàn cục trong app.js
[X] Thêm endpoint debug để kiểm tra biến môi trường
[X] Push code lên Git
[X] Đơn giản hóa ứng dụng bằng cách gỡ bỏ tạm thời faviconGenerator, WebSocket và Redis
[ ] Triển khai lại trên Vercel
[ ] Kiểm tra logs và endpoint debug
[ ] Kiểm tra kết nối MongoDB
[ ] Thêm lại các tính năng đã gỡ bỏ sau khi debug thành công

Lessons Learned:
- Vercel serverless functions có giới hạn về thời gian thực thi (mặc định là 10 giây)
- Cần xử lý lỗi kết nối MongoDB một cách graceful trong môi trường serverless
- WebSocket trên môi trường serverless cần cấu hình đặc biệt
- Không nên thoát process (process.exit) trong môi trường serverless
- Cần thêm các endpoint debug để kiểm tra trạng thái ứng dụng
- Khi gặp lỗi triển khai, nên đơn giản hóa ứng dụng bằng cách gỡ bỏ tạm thời các tính năng không cần thiết
- Cần kiểm tra kỹ các biến trùng lặp (như apiLimiter) để tránh lỗi SyntaxError
